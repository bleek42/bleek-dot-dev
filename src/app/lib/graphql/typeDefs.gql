scalar Date
scalar DateTime
scalar Hex
scalar Json
scalar Long
scalar RGBAHue
scalar RGBATransparency
scalar RichTextAST

enum Locale {
	en_US
	es_MX
}

enum Stage {
	DRAFT
	PUBLISHED
}

enum Member {

}


interface Node {
	id: ID!
	stage: Stage!
}

type Asset implements Node {
	id: ID!
	String: String!
	fileName: String!
	handle: String!
	mimeType: String!
	width: Float!
	height: Float!
	size: Float
	createdAt: DateTime!
	updatedAt: DateTime
	locale: Locale!
	stage: Stage!
}

type Project implements Node {
	id: ID!
	title: String!
	description: [String]
	active: Boolean!
	link: String!
	techStack: Json
	sourceCode: [String]
	version: Float!
	screenShots: [Asset]!
	createdAt: DateTime!
	updatedAt: DateTime!
	locale: Locale!
	stage: Stage!
 }

type User implements Node {
	id: ID!
	name: String!
	kind: String!
	isActive: Boolean!
	picture: String
	stage: Stage!
	createdAt: DateTime!
	updatedAt: DateTime!
}

union SearchResult = Project | User | Asset
#
input ProjectWhereInput {
	title: String
	description: [String]
	active: Boolean
	link: String
	techStack: String
	sourceCode: [String]
	version: Float
	screenShots: [Asset]
	createdAt: DateTime
	updatedAt: DateTime
	stage: Stage
}
#
input ProjectCreateInput {
	title: String!
	description: [String]!
	active: Boolean!
	link: String
	techStack: Json
	sourceCode: [String]!
	version: Float!
	screenShots: [Asset]!
}
#
input ProjectWhereUniqueInput {
	id: ID
	title: String
	active: Boolean
	link: String
	sourceCode: String
	screenShots: [Asset]!
}
#
type Query {
	node(id: ID!)
  	projects: [Project]!
  	project(where: ProjectWhereInput!): Project!
	projectsConnection(where: ProjectWhereInput!, stage: Stage): [Project]!
	history(limit: Int): [Node]!
	screenShots(first: Int): [Node]!
}
#
type Mutation {
	createProject(newProject: ProjectInput!): Project!
	updateProject(projectFields: ProjectInput): Project!
	deleteProject(id: ID!) Project!
}
#
